---
const { buttonName } = Astro.props;
---

<li class="headerNavDropdownWrapper">
    <button
        type="button"
        class="headerNavDropdownButton"
        aria-haspopup="true"
        aria-expanded="false"
        >{buttonName}
        <span>‚ùØ</span>
    </button>
    <ul>
        <slot />
    </ul>
</li>

<style>
    li {
        display: flex;
        align-items: center;
        flex-shrink: 0;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        position: relative;
    }
    ul {
        flex-direction: column;
        background-color: var(--gunmetal);
        padding: 0px 30px 0px 20px;
        position: relative;
        transition: 0.25s;
        display: none;
    }
    ul.show {
        display: flex;
    }
    /*Button Styling*/
    span {
        color: white;
        font-size: 10px;
        display: inline-block;
        transform: rotate(90deg);
        position: relative;
        bottom: 3px;
        left: 3px;
        transition: 0.25s;
    }
    span.toggled {
        transform: rotate(-90deg);
        transition: 0.25s;
    }
    @media (min-width: 917px) {
        li.headerNavDropdownWrapper:not(:first-of-type):before {
            padding-right: 20px;
            content: "|";
            font-weight: 400;
            color: white;
            position: absolute;
            top: 1.65rem;
            left: -1px;
            z-index: 1;
        }
        button {
            padding: 0px 20px 0px 20px;
            flex-basis: 50px;
        }
        li {
            flex-basis: 50px;
            align-self: flex-start;
        }
        ul {
            top: clamp(10px, -25px + (var(--header-height) / 2), 25px);
        }
    }
    @media (max-width: 916px) {
        button {
            padding: 10px 0;
        }
        ul {
            padding-left: 50px;
        }
    }
</style>
<script>
    const headerNavButtons = document.querySelectorAll(
        ".headerNavDropdownButton"
    );
    const toggleDropdown = (event) => {
        // @ts-ignore
        event.target.nextElementSibling.classList.toggle("show");
        // @ts-ignore
        event.target.firstElementChild.classList.toggle("toggled");
        console.log(event.target);
        let expanded = event.target.getAttribute("aria-expanded");
        if (expanded === "true") {
            event.target.setAttribute("aria-expanded", "false");
        } else {
            event.target.setAttribute("aria-expanded", "true");
        }
    };
    headerNavButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
            // @ts-ignore
            if (event.target.nextElementSibling.classList.contains("show")) {
                toggleDropdown(event);
            } else {
                let showing = document.querySelector("ul.show");
                if (showing) {
                    showing.classList.remove("show");
                    showing.previousElementSibling.firstElementChild.classList.remove(
                        "toggled"
                    );
                }
                toggleDropdown(event);
            }
        });
    });
</script>
